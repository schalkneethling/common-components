---
globs: **/*.html,**/*.js,**/*.tsx,**/*.css
---

# Accessibility Guidelines

## WCAG 2.2 AA Compliance

This project follows WCAG 2.2 AA guidelines for accessibility. All components must be accessible to users with disabilities.

## Semantic HTML

### Proper HTML Structure

Follow the pattern from [components/alertbox/index.html](mdc:components/alertbox/index.html):

```html
<!-- Use semantic HTML elements -->
<alertbox-manager
  aria-labelledby="alertbox-heading"
  role="group"
  config="alertbox-config"
>
  <h2 class="visually-hidden" id="alertbox-heading">Site notifications</h2>
</alertbox-manager>
```

### Required Semantic Elements

- Use `<h1>` through `<h6>` for headings in logical order
- Use `<button>` for interactive elements that trigger actions
- Use `<a>` for navigation and external links
- Use `<nav>`, `<main>`, `<section>`, `<article>`, `aside`, `footer` for page structure
- Use `<ul>`, `ol`, `dl`, and `<li>` for lists

### Avoid Non-Semantic Elements

```html
<!-- Bad: Using div for interactive elements -->
<div onclick="handleClick()">Click me</div>

<!-- Good: Using button for interactive elements -->
<!-- But inline click handlers are only done within a React context -->
<button onclick="handleClick()">Click me</button>
```

## ARIA Implementation

### ARIA Roles

Follow the pattern from [components/carousel/index.html](mdc:components/carousel/index.html):

```html
<!-- Grouping role for related content -->
<fiori-carousel
  aria-roledescription="carousel"
  aria-label="Dogs, past and present"
>
  <div aria-atomic="false" aria-live="polite" class="carousel-track">
    <div
      role="group"
      aria-roledescription="slide"
      aria-label="1 of 10"
      class="carousel-slide"
    >
      <!-- Slide content -->
    </div>
  </div>
</fiori-carousel>
```

### Common ARIA Roles

- `role="group"` - Groups related elements
- `role="button"` - Interactive elements that trigger actions. This should never be used as button elements must be used for interactive actions.
- `role="alert"` - Important messages that should be announced immediately
- `role="status"` - Less urgent messages that should be announced
- `role="region"` - Distinct sections of content
- `role="navigation"` - Navigation landmarks. Always prefer a sementic element such as the `nav` element over using an ARIA role.

### ARIA Labels and Descriptions

```html
<!-- Try to avoid the use of aria-label for accessible names whenever possible
 as these are not consistently translated by automated translation tools -->
<button aria-label="Close notification">Ã—</button>

<!-- Instead prefer using visually-hidden text -->
<button>
  <!-- Prefer SVG icons over ASCII icons -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="currentColor"
    viewBox="0 0 16 16"
    role="presentation"
  >
    <path
      d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
    />
  </svg>
  <span class="visually-hidden">Close notification</span>
</button>

<!-- Use aria-labelledby to reference other elements -->
<section aria-labelledby="component-heading">
  <h2 id="component-heading">Component Title</h2>
</section>

<!-- Use aria-describedby for additional descriptions -->
<input aria-describedby="password-help" type="password" id="password" />
<div id="password-help">Password must be at least 8 characters</div>
```

### ARIA Live Regions

```html
<!-- For dynamic content updates -->
<div aria-live="polite" aria-atomic="false">
  <!-- Content that changes dynamically -->
</div>

<!-- For urgent updates -->
<div aria-live="assertive" aria-atomic="true">
  <!-- Critical updates that must be announced immediately -->
</div>
```

## Keyboard Navigation

### Tab Order

Ensure logical tab order through interactive elements:

```html
<!-- Tab order should follow visual flow -->
<button>First</button>
<input type="text" />
<button>Second</button>
<a href="#">Link</a>
```

### Keyboard Event Handling

```javascript
// Handle keyboard events
element.addEventListener("keydown", (event) => {
  switch (event.key) {
    case "Enter":
    case " ":
      // Activate element
      event.preventDefault();
      handleActivation();
      break;
    case "Escape":
      // Close or cancel
      handleCancel();
      break;
    case "ArrowDown":
      // Navigate down
      event.preventDefault();
      navigateDown();
      break;
    case "ArrowUp":
      // Navigate up
      event.preventDefault();
      navigateUp();
      break;
  }
});
```

### Focus Management

```javascript
// Set focus to important elements
function showModal() {
  const modal = document.getElementById("modal");
  modal.style.display = "block";
  modal.focus(); // Focus the modal
}

// Trap focus within modal
function trapFocus(element) {
  const focusableElements = element.querySelectorAll(
    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
  );
  const firstElement = focusableElements[0];
  const lastElement = focusableElements[focusableElements.length - 1];

  element.addEventListener("keydown", (e) => {
    if (e.key === "Tab") {
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          lastElement.focus();
          e.preventDefault();
        }
      } else {
        if (document.activeElement === lastElement) {
          firstElement.focus();
          e.preventDefault();
        }
      }
    }
  });
}
```

## Screen Reader Support

### Visually Hidden Content

Use the `.visually-hidden` class for screen reader only content:

```css
.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}
```

```html
<!-- Screen reader only heading -->
<h2 class="visually-hidden" id="component-heading">Component description</h2>

<!-- Screen reader only button labels -->
<button>
  <svg-icon name="close" height="16" width="16"></svg-icon>
  <span class="visually-hidden">Close notification</span>
</button>
```

### Alt Text and Descriptions

```html
<!-- Descriptive alt text for images -->
<img
  src="chart.png"
  alt="Bar chart showing sales data for Q1 2024 with 15% growth"
/>

<!-- Decorative images should have empty alt -->
<img src="decoration.png" alt="" />

<!-- Complex images need longer descriptions -->
<img
  src="infographic.png"
  alt="Infographic showing company growth"
  aria-describedby="infographic-description"
/>
<div id="infographic-description">
  Detailed description of the infographic content...
</div>
```

## Color and Contrast

### Color Contrast Requirements

- Normal text: 4.5:1 contrast ratio
- Large text (18pt+): 3:1 contrast ratio
- UI components: 3:1 contrast ratio

### Don't Rely on Color Alone

```html
<!-- Bad: Using only color to convey information -->
<span style="color: red;">Error: Invalid input</span>

<!-- Good: Using color + text + icon -->
<span style="color: red;" aria-label="Error">
  <svg-icon name="critical" height="16" width="16"></svg-icon>
  Error: Invalid input
</span>
```

### High Contrast Support

```css
@media (prefers-contrast: high) {
  .component {
    border: 0.125rem solid currentColor;
  }

  .component__button {
    border: 0.125rem solid currentColor;
    background: transparent;
  }
}
```

## Form Accessibility

### Form Labels

```html
<!-- Explicit labels -->
<label for="email">Email address</label>
<input type="email" id="email" name="email" />

<!-- Implicit labels -->
<label>
  Email address
  <input type="email" name="email" />
</label>

<!-- ARIA labels for complex inputs -->
<div>
  <label for="password">Password</label>
  <input
    type="password"
    id="password"
    aria-describedby="password-requirements"
    aria-invalid="false"
  />
  <div id="password-requirements">
    Password must be at least 8 characters long
  </div>
</div>
```

### Form Validation

```javascript
// Provide clear error messages
function validateForm() {
  const email = document.getElementById("email");
  const emailError = document.getElementById("email-error");

  if (!email.validity.valid) {
    email.setAttribute("aria-invalid", "true");
    emailError.textContent = "Please enter a valid email address";
    emailError.setAttribute("role", "alert");
  } else {
    email.setAttribute("aria-invalid", "false");
    emailError.textContent = "";
    emailError.removeAttribute("role");
  }
}
```

## Testing Accessibility

### Manual Testing

1. **Keyboard Navigation**: Test all functionality using only keyboard
2. **Screen Reader Testing**: Use NVDA, JAWS, or VoiceOver
3. **Color Contrast**: Use tools like WebAIM's contrast checker
4. **Zoom Testing**: Test at 200% zoom level

### Automated Testing

```javascript
// Test ARIA attributes
test("should have proper ARIA attributes", async ({ page }) => {
  await page.goto("/components/component/index.html");

  const component = page.getByRole("group", { name: "Component description" });
  await expect(component).toHaveAttribute(
    "aria-labelledby",
    "component-heading",
  );
});

// Test keyboard navigation
test("should be navigable with keyboard", async ({ page }) => {
  await page.goto("/components/component/index.html");

  await page.keyboard.press("Tab");
  const focusedElement = page.locator(":focus");
  await expect(focusedElement).toHaveClass("component");
});
```

### Accessibility Testing Tools

- **axe-core**: Automated accessibility testing
- **WAVE**: Web accessibility evaluation
- **Lighthouse**: Built-in accessibility auditing
- **Color Contrast Checker**: Color blindness simulation

## Component-Specific Guidelines

### Alert Components

```html
<!-- Use appropriate ARIA roles -->
<div role="alert" aria-live="assertive">Critical error message</div>

<div role="status" aria-live="polite">Status update message</div>
```

### Interactive Components

```html
<!-- Provide clear focus indicators -->
<button>Button with focus styles</button>
```

### Navigation Components

```html
<!-- Use nav landmark -->
<nav aria-label="Main navigation">
  <ul>
    <li><a href="/home">Home</a></li>
    <li><a href="/about">About</a></li>
  </ul>
</nav>
```

## Documentation Requirements

### Accessibility Documentation

Each component must document:

- Keyboard navigation patterns
- Screen reader support
- ARIA implementation details
- Color contrast requirements
- Focus management behavior

### Example Documentation

```markdown
## Accessibility

This component is built with accessibility in mind:

- **ARIA Roles**: Uses `role="group"` for grouping related content
- **Keyboard Navigation**: All interactive elements are keyboard accessible
- **Screen Reader Support**: Includes proper ARIA labels and descriptions
- **Focus Management**: Maintains logical focus order
- **Color Contrast**: Meets WCAG 2.1 AA contrast requirements
```
